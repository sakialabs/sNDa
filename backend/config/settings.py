"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import Csv, Config, RepositoryEnv, config as decouple_config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

"""Environment loading

Prefer local overrides from a .env.local file (gitignored) when present.
Falls back to OS environment and the default .env otherwise.
"""

ENV_LOCAL_PATH = (Path(__file__).resolve().parent.parent.parent / ".env.local")
_local_config = Config(RepositoryEnv(str(ENV_LOCAL_PATH))) if ENV_LOCAL_PATH.exists() else None


def env(key, default=None, cast=None):
    """Read from .env.local first when available, else fallback to decouple config.

    decouple precedence is OS env > .env. This helper inserts .env.local with
    highest priority for local development without touching the live .env.
    """
    # Ensure cast is always a callable; python-decouple defaults to str when omitted
    _cast = cast if cast is not None else str
    if _local_config is not None:
        try:
            return _local_config(key, default=default, cast=_cast)
        except Exception:
            pass
    return decouple_config(key, default=default, cast=_cast)


# Load the secret key from environment variables
SECRET_KEY = env("SECRET_KEY", default="django-insecure-fallback-key-for-render")

# Load the debug setting from the .env file. Defaults to False if not found.
DEBUG = env("DEBUG", default=False, cast=bool)

# Load allowed hosts from the .env file as a comma-separated list.
ALLOWED_HOSTS = env("ALLOWED_HOSTS", default="localhost,127.0.0.1,snda-backend.onrender.com", cast=Csv())


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "channels",
    "rest_framework",
    "corsheaders",
    "django_celery_beat",
    # Local apps
    "users.apps.UsersConfig",
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL if available (Render), otherwise fall back to individual settings
DATABASE_URL = env("DATABASE_URL", default="")
if DATABASE_URL:
    DATABASES = {
        "default": dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": env("DB_ENGINE", default="django.db.backends.postgresql"),
            "NAME": env("DB_NAME", default="snda_db"),
            "USER": env("DB_USER", default="snda_user"),
            "PASSWORD": env("DB_PASSWORD", default="snda"),
            "HOST": env("DB_HOST", default="localhost"),
            "PORT": env("DB_PORT", default=5432, cast=int),
        }
    }

# Custom user model
AUTH_USER_MODEL = "users.CustomUser"

# CSRF trusted origins (domains/bases that can POST to this backend)
# Note: must include scheme. Extend via env when deploying.
CSRF_TRUSTED_ORIGINS = env(
    "CSRF_TRUSTED_ORIGINS",
    default="http://localhost:3000,https://snda.netlify.app",
    cast=Csv(),
)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Use WhiteNoise for efficient static files in production with hashed filenames
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Media files (user-uploaded content)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

# Production Security Settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# CORS Configuration
CORS_ALLOWED_ORIGINS = env(
    "CORS_ALLOWED_ORIGINS",
    default="http://localhost:3000,https://snda.netlify.app",
    cast=Csv(),
)
CORS_ALLOW_CREDENTIALS = True

# Celery Configuration
REDIS_URL = env("REDIS_URL", default="redis://localhost:6379")
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default=REDIS_URL)
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default=REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Django Channels (WebSockets)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    }
}

# Email Configuration
EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
SENDGRID_API_KEY = env("SENDGRID_API_KEY", default="")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="noreply@snda.org")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="sNDa Platform <noreply@snda.org>")

# Frontend URL
FRONTEND_URL = env("FRONTEND_URL", default="http://localhost:3000")
